{"version":3,"sources":["src/contexts/CountdownContext.tsx","src/utils/constants.ts","src/contexts/AppContext.tsx","styles/colors.ts","styles/fonts.ts","src/components/CurrentExercise.tsx","src/components/Item.tsx","src/components/SettingsModal.tsx","src/screens/ExercisesScreen.tsx","App.tsx"],"names":["countdownTimeout","EXERCISES","title","AppContext","createContext","AppProvider","children","useState","exercisesList","setExercisesList","stimulusDuration","series","restDuration","settings","setSettings","Provider","value","CountdownContext","CountdownProvider","useContext","isActive","setIsActive","isRestMode","setIsRestMode","seconds","setSeconds","currentItemIndex","setCurrentItemIndex","currentSeries","setCurrentSeries","useEffect","constants","length","setTimeout","startCountdown","resetCountdown","clearTimeout","CurrentExercise","time","onClick","View","style","styles","container","Text","textTitle","textRestTime","textTime","TouchableOpacity","buttonContainer","backgroundColor","colors","onPress","buttonText","StyleSheet","create","flex","justifyContent","alignItems","fontSize","lineHeight","textAlign","color","fontFamily","fonts","marginTop","marginHorizontal","height","borderRadius","paddingHorizontal","Item","item","padding","marginVertical","SettingsModal","isModalVisible","setModalVisible","setStimulusDuration","setRestDuration","setSeries","Modal","animationType","transparent","visible","onRequestClose","centeredView","modalView","settingsTitle","inputTitle","TextInput","input","onChangeText","parseInt","keyboardType","toString","Pressable","button","buttonClose","textStyle","marginBottom","margin","width","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","buttonOpen","fontWeight","modalText","ExercisesScreen","String","padStart","split","secondLeft","secondRight","SafeAreaView","MaterialIcons","name","size","currentContainer","listContainer","FlatList","data","renderItem","keyExtractor","App","useFonts","Jost_400Regular","Jost_600SemiBold"],"mappings":"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","file":"static/js/app.7b35b391.chunk.js","sourcesContent":["import React, {\n  createContext,\n  ReactNode,\n  useEffect,\n  useState,\n  useContext,\n} from \"react\";\nimport constants from \"../utils/constants\";\nimport { AppContext } from \"./AppContext\";\n\ninterface CountdownContextData {\n  seconds: number;\n  isRestMode: boolean;\n  isActive: boolean;\n  currentItemIndex: number;\n  currentSeries: number;\n  startCountdown: () => void;\n  resetCountdown: () => void;\n}\n\ninterface CountdownProviderProps {\n  children: ReactNode;\n}\n\nlet countdownTimeout: NodeJS.Timeout;\n\nexport const CountdownContext = createContext({} as CountdownContextData);\n\nexport function CountdownProvider({ children }: CountdownProviderProps) {\n  const { settings } = useContext(AppContext);\n  const [isActive, setIsActive] = useState(false);\n  const [isRestMode, setIsRestMode] = useState(false);\n  const [seconds, setSeconds] = useState(settings.stimulusDuration);\n  const [currentItemIndex, setCurrentItemIndex] = useState(0);\n  const [currentSeries, setCurrentSeries] = useState(1);\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function goToNextExercise() {\n    setCurrentItemIndex(currentItemIndex + 1);\n    setSeconds(settings.stimulusDuration);\n    setCurrentSeries(1);\n    setIsRestMode(false);\n  }\n\n  function countdownTime() {\n    countdownTimeout = setTimeout(() => {\n      setSeconds(seconds - 1);\n    }, 1000);\n  }\n\n  function increaseSeries() {\n    setIsRestMode(false);\n    setCurrentSeries(currentSeries + 1);\n    setSeconds(settings.stimulusDuration);\n  }\n\n  function goToRestTime() {\n    setIsRestMode(true);\n    setSeconds(settings.restDuration);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setCurrentItemIndex(0);\n    setIsActive(false);\n    setCurrentSeries(1);\n    setSeconds(settings.stimulusDuration);\n    setIsRestMode(false);\n  }\n\n  useEffect(() => {\n    if (isActive && currentItemIndex < constants.EXERCISES.length) {\n      if (seconds > 0) {\n        countdownTime();\n      } else if (!isRestMode) {\n        goToRestTime();\n      } else if (currentSeries < settings.series) {\n        increaseSeries();\n      } else {\n        goToNextExercise();\n      }\n    }\n  }, [isActive, seconds, isRestMode, currentSeries, currentItemIndex]);\n\n  return (\n    <CountdownContext.Provider\n      value={{\n        seconds,\n        isActive,\n        isRestMode,\n        currentItemIndex,\n        currentSeries,\n        startCountdown,\n        resetCountdown,\n      }}\n    >\n      {children}\n    </CountdownContext.Provider>\n  );\n}\n","export default {\n  EXERCISES: [\n    {\n      title: \"Polichinelo\",\n    },\n    {\n      title: \"Corrida parada\",\n    },\n    {\n      title: \"Meio Burpee\",\n    },\n    {\n      title: \"Polichinelo frontal\",\n    },\n    {\n      title: \"Abdominal canivete alternado\",\n    },\n  ],\n};\n","import React, { createContext, ReactNode, useState } from \"react\";\n\ninterface Settings {\n  stimulusDuration: number;\n  series: number;\n  restDuration: number;\n}\n\ninterface AppContextData {\n  exercisesList: string[];\n  settings: Settings;\n  setExercisesList: (exercisesList: string[]) => void;\n  setSettings: (settings: Settings) => void;\n}\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport const AppContext = createContext({} as AppContextData);\n\nexport function AppProvider({ children }: AppProviderProps) {\n  const [exercisesList, setExercisesList] = useState<string[]>([]);\n  const [settings, setSettings] = useState<Settings>({\n    stimulusDuration: 30,\n    series: 5,\n    restDuration: 15,\n  });\n\n  return (\n    <AppContext.Provider\n      value={{\n        exercisesList,\n        settings,\n        setExercisesList,\n        setSettings,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n}\n","export default {\n    green: '#32B768',\n    green_dark: '#2B7A4B',\n    green_light: '#DAF2E4',\n  \n    heading: '#52665A',\n    body_dark: '#738078',\n    body_light: '#AAB2AD',\n  \n    background: '#FFFFFF',\n    shape: '#F0F0F0',\n    white: '#FFFFFF',\n    gray: '#CFCFCF',\n  \n    blue: '#3D7199',\n    blue_light: '#EBF6FF',\n  \n    red: '#E83F5B',\n    black: \"#000000\"\n  };\n  ","export default {\n    heading: 'Jost_600SemiBold',\n    text: 'Jost_400Regular',\n    complement: 'Jost_400Regular'\n}","import React from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport colors from \"../../styles/colors\";\nimport fonts from \"../../styles/fonts\";\n\ninterface CurrentExerciseProps {\n  title: string;\n  time: string;\n  isActive: boolean;\n  isRestMode: boolean;\n  onClick: Function;\n}\n\nexport function CurrentExercise({\n  title,\n  time,\n  isActive,\n  isRestMode,\n  onClick,\n}: CurrentExerciseProps) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.textTitle}>{title}</Text>\n      {isRestMode && <Text style={styles.textRestTime}>DESCANSO</Text>}\n      <Text style={styles.textTime}>{time}</Text>\n      <TouchableOpacity\n        style={{\n          ...styles.buttonContainer,\n          backgroundColor: isActive ? colors.red : colors.green,\n        }}\n        onPress={onClick}\n      >\n        <Text style={styles.buttonText}>\n          {isActive ? \"Cancelar\" : \"Iniciar\"}\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  textTitle: {\n    fontSize: 24,\n    lineHeight: 32,\n    textAlign: \"center\",\n    color: colors.heading,\n    fontFamily: fonts.heading,\n    marginTop: 20,\n    marginHorizontal: 16,\n  },\n  textRestTime: {\n    fontSize: 30,\n    lineHeight: 32,\n    textAlign: \"center\",\n    color: colors.heading,\n    fontFamily: fonts.heading,\n    marginTop: 20,\n  },\n  textTime: {\n    fontSize: 52,\n    fontFamily: fonts.text,\n    color: colors.heading,\n  },\n  buttonContainer: {\n    height: 56,\n    borderRadius: 16,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingHorizontal: 16,\n  },\n  buttonText: {\n    fontSize: 18,\n    color: colors.white,\n    fontFamily: fonts.text,\n  },\n});\n","import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport colors from \"../../styles/colors\";\nimport fonts from \"../../styles/fonts\";\n\ninterface ItemProps {\n  title: string;\n  backgroundColor: string;\n}\n\nexport function Item({ title, backgroundColor }: ItemProps) {\n  return (\n    <View style={{ ...styles.item, backgroundColor: backgroundColor }}>\n      <Text style={styles.title}>{title}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  item: {\n    color: colors.white,\n    padding: 20,\n    marginVertical: 8,\n    marginHorizontal: 16,\n    borderRadius: 16,\n  },\n  title: {\n    fontSize: 18,\n    fontFamily: fonts.text,\n    color: colors.white,\n  },\n});\n","import React, { useContext, useState } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Modal,\n  Pressable,\n  TextInput,\n} from \"react-native\";\nimport colors from \"../../styles/colors\";\nimport fonts from \"../../styles/fonts\";\nimport { AppContext } from \"../contexts/AppContext\";\n\ninterface SettingsModalProps {\n  isModalVisible: boolean;\n  setModalVisible: (visibility: boolean) => void;\n}\n\nexport function SettingsModal({\n  isModalVisible,\n  setModalVisible,\n}: SettingsModalProps) {\n  const { exercisesList, settings, setExercisesList, setSettings } =\n    useContext(AppContext);\n\n  const [stimulusDuration, setStimulusDuration] = useState(\n    settings.stimulusDuration\n  );\n  const [restDuration, setRestDuration] = useState(settings.restDuration);\n  const [series, setSeries] = useState(settings.series);\n  const [exercisesText, setExercisesText] = useState(settings.stimulusDuration);\n\n  return (\n    <Modal\n      animationType=\"slide\"\n      transparent={true}\n      visible={isModalVisible}\n      onRequestClose={() => {\n        setModalVisible(!isModalVisible);\n      }}\n    >\n      <View style={styles.centeredView}>\n        <View style={styles.modalView}>\n          <Text style={styles.settingsTitle}>Configurações</Text>\n          <Text style={styles.inputTitle}>Duração do estímulo</Text>\n          <TextInput\n            style={styles.input}\n            onChangeText={(value) =>\n              setStimulusDuration(value ? parseInt(value) : 0)\n            }\n            keyboardType=\"numeric\"\n            value={stimulusDuration.toString()}\n          />\n          <Text style={styles.inputTitle}>Duração do descanço</Text>\n          <TextInput\n            style={styles.input}\n            onChangeText={(value) =>\n              setRestDuration(value ? parseInt(value) : 0)\n            }\n            keyboardType=\"numeric\"\n            value={restDuration.toString()}\n          />\n          <Text style={styles.inputTitle}>Quantidade de séries</Text>\n          <TextInput\n            style={styles.input}\n            onChangeText={(value) => setSeries(value ? parseInt(value) : 0)}\n            keyboardType=\"numeric\"\n            value={series.toString()}\n          />\n          <Pressable\n            style={[styles.button, styles.buttonClose]}\n            onPress={() => {\n              setSettings({\n                stimulusDuration: stimulusDuration,\n                series: series,\n                restDuration: restDuration,\n              });\n              setModalVisible(!isModalVisible);\n            }}\n          >\n            <Text style={styles.textStyle}>Save</Text>\n          </Pressable>\n        </View>\n      </View>\n    </Modal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  settingsTitle: {\n    color: colors.black,\n    fontFamily: fonts.text,\n    fontSize: 18,\n    marginBottom: 12,\n  },\n  inputTitle: {\n    color: colors.black,\n    fontFamily: fonts.text,\n    fontSize: 16,\n  },\n\n  input: {\n    height: 40,\n    margin: 12,\n    width: 200,\n    textAlign: \"center\",\n    backgroundColor: colors.green_light,\n    color: colors.heading,\n    fontFamily: fonts.text,\n    fontSize: 16,\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n  },\n  buttonOpen: {\n    backgroundColor: \"#F194FF\",\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\",\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\",\n  },\n});\n","import React, { useContext, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  FlatList,\n  TouchableOpacity,\n  Modal,\n} from \"react-native\";\n\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport colors from \"../../styles/colors\";\nimport fonts from \"../../styles/fonts\";\nimport { CurrentExercise } from \"../components/CurrentExercise\";\nimport { Item } from \"../components/Item\";\nimport { CountdownContext } from \"../contexts/CountdownContext\";\nimport constants from \"../utils/constants\";\nimport { SettingsModal } from \"../components/SettingsModal\";\nimport { AppContext } from \"../contexts/AppContext\";\n\nexport function ExercisesScreen() {\n  const {\n    seconds,\n    isActive,\n    isRestMode,\n    currentItemIndex,\n    currentSeries,\n    startCountdown,\n    resetCountdown,\n  } = useContext(CountdownContext);\n\n  const { settings } = useContext(AppContext);\n\n  function renderItem({ item }) {\n    const backgroundColor =\n      currentItemIndex < constants.EXERCISES.length &&\n      item.title === constants.EXERCISES[currentItemIndex].title\n        ? colors.green_dark\n        : colors.green;\n    return <Item title={item.title} backgroundColor={backgroundColor} />;\n  }\n\n  const [secondLeft, secondRight] = String(seconds).padStart(2, \"0\").split(\"\");\n  const [isModalVisible, setModalVisible] = useState(false);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <SettingsModal\n        isModalVisible={isModalVisible}\n        setModalVisible={setModalVisible}\n      />\n      <View\n        style={{\n          alignItems: \"flex-end\",\n          justifyContent: \"center\",\n          padding: 16,\n        }}\n      >\n        <TouchableOpacity\n          onPress={() => {\n            setModalVisible(true);\n          }}\n        >\n          <MaterialIcons name=\"settings\" color={colors.heading} size={24} />\n        </TouchableOpacity>\n      </View>\n      <View style={styles.currentContainer}>\n        {constants.EXERCISES[currentItemIndex] ? (\n          <CurrentExercise\n            title={`${constants.EXERCISES[currentItemIndex].title} (${currentSeries} de ${settings.series})`}\n            isActive={isActive}\n            isRestMode={isRestMode}\n            time={`00:${secondLeft}${secondRight}`}\n            onClick={() => {\n              if (isActive) {\n                resetCountdown();\n              } else {\n                startCountdown();\n              }\n            }}\n          />\n        ) : (\n          <View>\n            <Text style={styles.textTitle}>\n              Parabéns, treino concluído com sucesso!\n            </Text>\n\n            <TouchableOpacity\n              style={styles.buttonContainer}\n              onPress={() => {\n                resetCountdown();\n              }}\n            >\n              <Text style={styles.title}>Reiniciar</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      </View>\n      <View style={styles.listContainer}>\n        <FlatList\n          data={constants.EXERCISES}\n          renderItem={renderItem}\n          keyExtractor={(item) => item.title}\n        />\n      </View>\n      {/* <StatusBar style=\"auto\" /> */}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.green_light,\n    padding: 20,\n  },\n  currentContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: colors.green_light,\n  },\n  listContainer: {\n    flex: 2,\n  },\n  title: {\n    fontSize: 18,\n    fontFamily: fonts.text,\n    color: colors.white,\n  },\n  textTitle: {\n    fontSize: 24,\n    lineHeight: 32,\n    textAlign: \"center\",\n    color: colors.heading,\n    fontFamily: fonts.heading,\n    marginTop: 20,\n  },\n  buttonContainer: {\n    height: 56,\n    borderRadius: 16,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingHorizontal: 16,\n    backgroundColor: colors.red,\n  },\n});\n","import React from \"react\";\n\nimport {\n  useFonts,\n  Jost_400Regular,\n  Jost_600SemiBold,\n} from \"@expo-google-fonts/jost\";\nimport AppLoading from \"expo-app-loading\";\n\nimport { CountdownProvider } from \"./src/contexts/CountdownContext\";\nimport { ExercisesScreen } from \"./src/screens/ExercisesScreen\";\nimport { AppProvider } from \"./src/contexts/AppContext\";\n\nexport default function App() {\n  let [fontsLoaded] = useFonts({\n    Jost_400Regular,\n    Jost_600SemiBold,\n  });\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  }\n\n  return (\n    <AppProvider>\n      <CountdownProvider>\n        <ExercisesScreen />\n      </CountdownProvider>\n    </AppProvider>\n  );\n}\n"],"sourceRoot":""}