{"version":3,"sources":["styles/colors.ts","styles/fonts.ts","src/components/CurrentExercise/index.tsx","App.tsx"],"names":["CurrentExercise","title","time","isActive","isRestMode","onClick","View","style","styles","container","Text","textTitle","textRestTime","textTime","TouchableOpacity","buttonContainer","backgroundColor","colors","onPress","buttonText","StyleSheet","create","flex","justifyContent","alignItems","fontSize","lineHeight","textAlign","color","fontFamily","fonts","marginTop","marginHorizontal","height","borderRadius","paddingHorizontal","countdownTimeout","SETTINGS","EXERCISES","Item","item","App","useFonts","Jost_400Regular","Jost_600SemiBold","fontsLoaded","useState","setIsActive","setIsRestMode","setTime","currentItemIndex","setCurrentItemIndex","currentSeries","setCurrentSeries","reset","clearTimeout","useEffect","length","setTimeout","String","padStart","split","secondLeft","secondRight","SafeAreaView","currentContainer","listContainer","FlatList","data","renderItem","keyExtractor","padding","marginVertical"],"mappings":"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","file":"static/js/app.01c96ead.chunk.js","sourcesContent":["export default {\n    green: '#32B768',\n    green_dark: '#2B7A4B',\n    green_light: '#DAF2E4',\n  \n    heading: '#52665A',\n    body_dark: '#738078',\n    body_light: '#AAB2AD',\n  \n    background: '#FFFFFF',\n    shape: '#F0F0F0',\n    white: '#FFFFFF',\n    gray: '#CFCFCF',\n  \n    blue: '#3D7199',\n    blue_light: '#EBF6FF',\n  \n    red: '#E83F5B',\n  };\n  ","export default {\n    heading: 'Jost_600SemiBold',\n    text: 'Jost_400Regular',\n    complement: 'Jost_400Regular'\n}","import React from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport colors from \"../../../styles/colors\";\nimport fonts from \"../../../styles/fonts\";\n\ninterface CurrentExerciseProps {\n  title: string;\n  time: string;\n  isActive: boolean;\n  isRestMode: boolean;\n  onClick: Function;\n}\n\nexport function CurrentExercise({\n  title,\n  time,\n  isActive,\n  isRestMode,\n  onClick,\n}: CurrentExerciseProps) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.textTitle}>{title}</Text>\n      {isRestMode && <Text style={styles.textRestTime}>DESCANSO</Text>}\n      <Text style={styles.textTime}>{time}</Text>\n      <TouchableOpacity\n        style={{\n          ...styles.buttonContainer,\n          backgroundColor: isActive ? colors.red : colors.green,\n        }}\n        onPress={onClick}\n      >\n        <Text style={styles.buttonText}>\n          {isActive ? \"Cancelar\" : \"Iniciar\"}\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  textTitle: {\n    fontSize: 24,\n    lineHeight: 32,\n    textAlign: \"center\",\n    color: colors.heading,\n    fontFamily: fonts.heading,\n    marginTop: 20,\n    marginHorizontal: 16\n  },\n  textRestTime: {\n    fontSize: 30,\n    lineHeight: 32,\n    textAlign: \"center\",\n    color: colors.heading,\n    fontFamily: fonts.heading,\n    marginTop: 20,\n  },\n  textTime: {\n    fontSize: 52,\n    fontFamily: fonts.text,\n    color: colors.heading,\n  },\n  buttonContainer: {\n    height: 56,\n    borderRadius: 16,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingHorizontal: 16,\n  },\n  buttonText: {\n    fontSize: 18,\n    color: colors.white,\n    fontFamily: fonts.text,\n  },\n});\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  FlatList,\n  TouchableOpacity,\n} from \"react-native\";\nimport { CurrentExercise } from \"./src/components/CurrentExercise\";\nimport colors from \"./styles/colors\";\nimport {\n  useFonts,\n  Jost_400Regular,\n  Jost_600SemiBold,\n} from \"@expo-google-fonts/jost\";\nimport AppLoading from \"expo-app-loading\";\nimport fonts from \"./styles/fonts\";\n\nconst SETTINGS = {\n  stimulusDuration: 30,\n  series: 5,\n  restDuration: 15,\n};\nconst EXERCISES = [\n  {\n    title: \"Polichinelo\",\n  },\n  {\n    title: \"Corrida parada\",\n  },\n  {\n    title: \"Meio Burpee\",\n  },\n  {\n    title: \"Polichinelo frontal\",\n  },\n  {\n    title: \"Abdominal canivete alternado\",\n  },\n];\n\nlet countdownTimeout: NodeJS.Timeout;\n\ninterface ItemProps {\n  title: string;\n  backgroundColor: string;\n}\n\nconst Item = ({ title, backgroundColor }: ItemProps) => {\n  return (\n    <View style={{ ...styles.item, backgroundColor: backgroundColor }}>\n      <Text style={styles.title}>{title}</Text>\n    </View>\n  );\n};\n\nexport default function App() {\n  let [fontsLoaded] = useFonts({\n    Jost_400Regular,\n    Jost_600SemiBold,\n  });\n\n  const [isActive, setIsActive] = useState(false);\n  const [isRestMode, setIsRestMode] = useState(false);\n  const [time, setTime] = useState(SETTINGS.stimulusDuration);\n  const [currentItemIndex, setCurrentItemIndex] = useState(0);\n  const [currentSeries, setCurrentSeries] = useState(1);\n\n  function renderItem({ item }) {\n    const backgroundColor =\n      currentItemIndex < EXERCISES.length &&\n      item.title === EXERCISES[currentItemIndex].title\n        ? colors.green_dark\n        : colors.green;\n    return <Item title={item.title} backgroundColor={backgroundColor} />;\n  }\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function goToNextExercise() {\n    setCurrentItemIndex(currentItemIndex + 1);\n    setTime(SETTINGS.stimulusDuration);\n    setCurrentSeries(1);\n  }\n\n  function countdownTime() {\n    countdownTimeout = setTimeout(() => {\n      setTime(time - 1);\n    }, 1000);\n  }\n\n  function increaseSeries() {\n    setIsRestMode(false);\n    setCurrentSeries(currentSeries + 1);\n    setTime(SETTINGS.stimulusDuration);\n  }\n\n  function goToRestTime() {\n    setIsRestMode(true);\n    setTime(SETTINGS.restDuration);\n  }\n\n  function reset() {\n    clearTimeout(countdownTimeout);\n    setCurrentItemIndex(0);\n    setIsActive(false);\n    setCurrentSeries(1);\n    setTime(SETTINGS.stimulusDuration);\n    setIsRestMode(false);\n  }\n\n  useEffect(() => {\n    if (isActive && currentItemIndex < EXERCISES.length) {\n      if (time > 0) {\n        countdownTime();\n      } else if (!isRestMode) {\n        goToRestTime();\n      } else if (currentSeries < SETTINGS.series) {\n        increaseSeries();\n      } else {\n        goToNextExercise();\n      }\n    }\n  });\n\n  const [secondLeft, secondRight] = String(time).padStart(2, \"0\").split(\"\");\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.currentContainer}>\n        {EXERCISES[currentItemIndex] ? (\n          <CurrentExercise\n            title={`${EXERCISES[currentItemIndex].title} (${currentSeries} de ${SETTINGS.series})`}\n            isActive={isActive}\n            isRestMode={isRestMode}\n            time={`00:${secondLeft}${secondRight}`}\n            onClick={() => {\n              if (isActive) {\n                reset();\n              } else {\n                startCountdown();\n              }\n            }}\n          />\n        ) : (\n          <View>\n            <Text style={styles.textTitle}>Parabéns, treino concluído com sucesso!</Text>\n\n            <TouchableOpacity\n              style={styles.buttonContainer}\n              onPress={() => {\n                reset();\n              }}\n            >\n              <Text style={styles.title}>Reiniciar</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      </View>\n      <View style={styles.listContainer}>\n        <FlatList\n          data={EXERCISES}\n          renderItem={renderItem}\n          keyExtractor={(item) => item.title}\n        />\n      </View>\n      {/* <StatusBar style=\"auto\" /> */}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.green_light,\n    padding: 20,\n  },\n  currentContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: colors.green_light,\n  },\n  listContainer: {\n    flex: 2,\n  },\n  item: {\n    color: colors.white,\n    padding: 20,\n    marginVertical: 8,\n    marginHorizontal: 16,\n    borderRadius: 16,\n  },\n  title: {\n    fontSize: 18,\n    fontFamily: fonts.text,\n    color: colors.white,\n  },\n  textTitle: {\n    fontSize: 24,\n    lineHeight: 32,\n    textAlign: \"center\",\n    color: colors.heading,\n    fontFamily: fonts.heading,\n    marginTop: 20,\n  },\n  buttonContainer: {\n    height: 56,\n    borderRadius: 16,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingHorizontal: 16,\n    backgroundColor: colors.red,\n  },\n});\n"],"sourceRoot":""}